
Buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080037f4  080037f4  000137f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800380c  0800380c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003814  08003814  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003818  08003818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800381c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000002c  08003848  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08003848  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6f9  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2b  00000000  00000000  0002d755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0002f480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  000300b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166ef  00000000  00000000  00030c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfa7  00000000  00000000  00047337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de01  00000000  00000000  000552de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e30df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000336c  00000000  00000000  000e3130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080037dc 	.word	0x080037dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	080037dc 	.word	0x080037dc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <setsound>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int SoundLut[]={131,147,165,175,196,220,247,262};
void setsound(int freq)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	htim2.Instance->ARR = 1000000 / freq - 1;
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <setsound+0x34>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80004ec:	1e5a      	subs	r2, r3, #1
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <setsound+0x38>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	62da      	str	r2, [r3, #44]	; 0x2c
	htim2.Instance->CCR1 = htim2.Instance->ARR / 2;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <setsound+0x38>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <setsound+0x38>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	0852      	lsrs	r2, r2, #1
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	000f4240 	.word	0x000f4240
 8000514:	20000048 	.word	0x20000048

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fb87 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f8b7 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f9b3 	bl	8000890 <MX_GPIO_Init>
  MX_TIM2_Init();
 800052a:	f000 f911 	bl	8000750 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800052e:	f000 f985 	bl	800083c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000532:	2100      	movs	r1, #0
 8000534:	4855      	ldr	r0, [pc, #340]	; (800068c <main+0x174>)
 8000536:	f001 fc39 	bl	8001dac <HAL_TIM_PWM_Start>
initUart();
 800053a:	f000 fadf 	bl	8000afc <initUart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	char ch=getChar();
 800053e:	f000 fb1b 	bl	8000b78 <getChar>
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  	switch(ch							){
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3b43      	subs	r3, #67	; 0x43
 800054a:	2b24      	cmp	r3, #36	; 0x24
 800054c:	d8f7      	bhi.n	800053e <main+0x26>
 800054e:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <main+0x3c>)
 8000550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000554:	08000675 	.word	0x08000675
 8000558:	0800053f 	.word	0x0800053f
 800055c:	0800053f 	.word	0x0800053f
 8000560:	0800053f 	.word	0x0800053f
 8000564:	0800053f 	.word	0x0800053f
 8000568:	0800053f 	.word	0x0800053f
 800056c:	0800053f 	.word	0x0800053f
 8000570:	0800053f 	.word	0x0800053f
 8000574:	0800053f 	.word	0x0800053f
 8000578:	0800053f 	.word	0x0800053f
 800057c:	0800053f 	.word	0x0800053f
 8000580:	0800053f 	.word	0x0800053f
 8000584:	0800053f 	.word	0x0800053f
 8000588:	0800053f 	.word	0x0800053f
 800058c:	0800053f 	.word	0x0800053f
 8000590:	0800053f 	.word	0x0800053f
 8000594:	0800053f 	.word	0x0800053f
 8000598:	0800053f 	.word	0x0800053f
 800059c:	0800053f 	.word	0x0800053f
 80005a0:	0800053f 	.word	0x0800053f
 80005a4:	0800053f 	.word	0x0800053f
 80005a8:	0800053f 	.word	0x0800053f
 80005ac:	0800053f 	.word	0x0800053f
 80005b0:	0800053f 	.word	0x0800053f
 80005b4:	0800053f 	.word	0x0800053f
 80005b8:	0800053f 	.word	0x0800053f
 80005bc:	0800053f 	.word	0x0800053f
 80005c0:	0800053f 	.word	0x0800053f
 80005c4:	0800053f 	.word	0x0800053f
 80005c8:	0800053f 	.word	0x0800053f
 80005cc:	0800064d 	.word	0x0800064d
 80005d0:	08000661 	.word	0x08000661
 80005d4:	080005e9 	.word	0x080005e9
 80005d8:	080005fd 	.word	0x080005fd
 80005dc:	08000611 	.word	0x08000611
 80005e0:	08000625 	.word	0x08000625
 80005e4:	08000639 	.word	0x08000639
		case 'c':
			setsound(SoundLut[0]);
 80005e8:	4b29      	ldr	r3, [pc, #164]	; (8000690 <main+0x178>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff75 	bl	80004dc <setsound>
			HAL_Delay(300);
 80005f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005f6:	f000 fb8d 	bl	8000d14 <HAL_Delay>
			break;
 80005fa:	e045      	b.n	8000688 <main+0x170>
		case 'd':
			setsound(SoundLut[1]);
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <main+0x178>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff6b 	bl	80004dc <setsound>
			HAL_Delay(300);
 8000606:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800060a:	f000 fb83 	bl	8000d14 <HAL_Delay>
			break;
 800060e:	e03b      	b.n	8000688 <main+0x170>
		case 'e':
			setsound(SoundLut[2]);
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <main+0x178>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ff61 	bl	80004dc <setsound>
			HAL_Delay(300);
 800061a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800061e:	f000 fb79 	bl	8000d14 <HAL_Delay>
			break;
 8000622:	e031      	b.n	8000688 <main+0x170>
		case 'f':
			setsound(SoundLut[3]);
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <main+0x178>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff57 	bl	80004dc <setsound>
			HAL_Delay(300);
 800062e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000632:	f000 fb6f 	bl	8000d14 <HAL_Delay>
			break;
 8000636:	e027      	b.n	8000688 <main+0x170>
		case 'g':
			setsound(SoundLut[4]);
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <main+0x178>)
 800063a:	691b      	ldr	r3, [r3, #16]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff4d 	bl	80004dc <setsound>
			HAL_Delay(300);
 8000642:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000646:	f000 fb65 	bl	8000d14 <HAL_Delay>
			break;
 800064a:	e01d      	b.n	8000688 <main+0x170>
		case 'a':
			setsound(SoundLut[5]);
 800064c:	4b10      	ldr	r3, [pc, #64]	; (8000690 <main+0x178>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff43 	bl	80004dc <setsound>
			HAL_Delay(300);
 8000656:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800065a:	f000 fb5b 	bl	8000d14 <HAL_Delay>
			break;
 800065e:	e013      	b.n	8000688 <main+0x170>
		case 'b':
			setsound(SoundLut[6]);
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <main+0x178>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff39 	bl	80004dc <setsound>
			HAL_Delay(300);
 800066a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800066e:	f000 fb51 	bl	8000d14 <HAL_Delay>
			break;
 8000672:	e009      	b.n	8000688 <main+0x170>
		case 'C':
			setsound(SoundLut[7]);
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <main+0x178>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff2f 	bl	80004dc <setsound>
			HAL_Delay(300);
 800067e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000682:	f000 fb47 	bl	8000d14 <HAL_Delay>
			break;
 8000686:	bf00      	nop
  {
 8000688:	e759      	b.n	800053e <main+0x26>
 800068a:	bf00      	nop
 800068c:	20000048 	.word	0x20000048
 8000690:	20000000 	.word	0x20000000

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 f892 	bl	80037cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xb4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xb4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xb4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <SystemClock_Config+0xb8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1b      	ldr	r2, [pc, #108]	; (800074c <SystemClock_Config+0xb8>)
 80006de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <SystemClock_Config+0xb8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fe51 	bl	80013ac <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000710:	f000 f8d8 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f8b4 	bl	800189c <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800073a:	f000 f8c3 	bl	80008c4 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08e      	sub	sp, #56	; 0x38
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MX_TIM2_Init+0xe8>)
 8000782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000786:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <MX_TIM2_Init+0xe8>)
 800078a:	220f      	movs	r2, #15
 800078c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_TIM2_Init+0xe8>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_TIM2_Init+0xe8>)
 8000796:	f240 32e7 	movw	r2, #999	; 0x3e7
 800079a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079c:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_TIM2_Init+0xe8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_TIM2_Init+0xe8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a8:	4823      	ldr	r0, [pc, #140]	; (8000838 <MX_TIM2_Init+0xe8>)
 80007aa:	f001 fa57 	bl	8001c5c <HAL_TIM_Base_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007b4:	f000 f886 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c2:	4619      	mov	r1, r3
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <MX_TIM2_Init+0xe8>)
 80007c6:	f001 fc63 	bl	8002090 <HAL_TIM_ConfigClockSource>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007d0:	f000 f878 	bl	80008c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <MX_TIM2_Init+0xe8>)
 80007d6:	f001 fa90 	bl	8001cfa <HAL_TIM_PWM_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007e0:	f000 f870 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4619      	mov	r1, r3
 80007f2:	4811      	ldr	r0, [pc, #68]	; (8000838 <MX_TIM2_Init+0xe8>)
 80007f4:	f001 ffe0 	bl	80027b8 <HAL_TIMEx_MasterConfigSynchronization>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007fe:	f000 f861 	bl	80008c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000802:	2360      	movs	r3, #96	; 0x60
 8000804:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8000806:	f240 13f3 	movw	r3, #499	; 0x1f3
 800080a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	4619      	mov	r1, r3
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <MX_TIM2_Init+0xe8>)
 800081c:	f001 fb76 	bl	8001f0c <HAL_TIM_PWM_ConfigChannel>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000826:	f000 f84d 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <MX_TIM2_Init+0xe8>)
 800082c:	f000 f898 	bl	8000960 <HAL_TIM_MspPostInit>

}
 8000830:	bf00      	nop
 8000832:	3738      	adds	r7, #56	; 0x38
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000048 	.word	0x20000048

0800083c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_USART1_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_USART1_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USART1_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_USART1_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USART1_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USART1_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USART1_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_USART1_UART_Init+0x4c>)
 8000874:	f002 f80e 	bl	8002894 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f821 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000090 	.word	0x20000090
 800088c:	40011000 	.word	0x40011000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_GPIO_Init+0x30>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <MX_GPIO_Init+0x30>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_GPIO_Init+0x30>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <HAL_MspInit+0x4c>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x4c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000930:	d10d      	bne.n	800094e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800094e:	bf00      	nop
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000980:	d11d      	bne.n	80009be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_TIM_MspPostInit+0x68>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <HAL_TIM_MspPostInit+0x68>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_TIM_MspPostInit+0x68>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099e:	2301      	movs	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <HAL_TIM_MspPostInit+0x6c>)
 80009ba:	f000 fb73 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3720      	adds	r7, #32
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <HAL_UART_MspInit+0x94>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d134      	bne.n	8000a5c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <HAL_UART_MspInit+0x98>)
 80009fc:	f043 0310 	orr.w	r3, r3, #16
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f003 0310 	and.w	r3, r3, #16
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_UART_MspInit+0x98>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <HAL_UART_MspInit+0x9c>)
 8000a48:	f000 fb2c 	bl	80010a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2025      	movs	r0, #37	; 0x25
 8000a52:	f000 fa5e 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a56:	2025      	movs	r0, #37	; 0x25
 8000a58:	f000 fa77 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40011000 	.word	0x40011000
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f90a 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <USART1_IRQHandler+0x10>)
 8000aca:	f001 ff61 	bl	8002990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000090 	.word	0x20000090

08000ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <initUart>:
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

//-uart 장치 초기화-
void initUart()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	4903      	ldr	r1, [pc, #12]	; (8000b10 <initUart+0x14>)
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <initUart+0x18>)
 8000b06:	f001 ff12 	bl	800292e <HAL_UART_Receive_IT>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001db 	.word	0x200001db
 8000b14:	20000090 	.word	0x20000090

08000b18 <HAL_UART_RxCpltCallback>:
//-문자 수신처리-
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++]=rxChar;
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_UART_RxCpltCallback+0x4c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	490f      	ldr	r1, [pc, #60]	; (8000b64 <HAL_UART_RxCpltCallback+0x4c>)
 8000b28:	600a      	str	r2, [r1, #0]
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_UART_RxCpltCallback+0x50>)
 8000b2c:	7811      	ldrb	r1, [r2, #0]
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <HAL_UART_RxCpltCallback+0x54>)
 8000b30:	54d1      	strb	r1, [r2, r3]
	rxBufferPp%=rxBufferMax;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_UART_RxCpltCallback+0x4c>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_RxCpltCallback+0x58>)
 8000b38:	fb83 1302 	smull	r1, r3, r3, r2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	11d9      	asrs	r1, r3, #7
 8000b40:	17d3      	asrs	r3, r2, #31
 8000b42:	1ac9      	subs	r1, r1, r3
 8000b44:	460b      	mov	r3, r1
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	1ad1      	subs	r1, r2, r3
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_UART_RxCpltCallback+0x4c>)
 8000b4e:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(&huart1, &rxChar, 1); //interrupt 재설정
 8000b50:	2201      	movs	r2, #1
 8000b52:	4905      	ldr	r1, [pc, #20]	; (8000b68 <HAL_UART_RxCpltCallback+0x50>)
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <HAL_UART_RxCpltCallback+0x5c>)
 8000b56:	f001 feea 	bl	800292e <HAL_UART_Receive_IT>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000d8 	.word	0x200000d8
 8000b68:	200001db 	.word	0x200001db
 8000b6c:	200000dc 	.word	0x200000dc
 8000b70:	80808081 	.word	0x80808081
 8000b74:	20000090 	.word	0x20000090

08000b78 <getChar>:
//-버퍼에서 문자 꺼내오기-
uint8_t getChar()
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
	uint8_t result;
	if(rxBufferGp==rxBufferPp) return 0;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <getChar+0x54>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <getChar+0x58>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d101      	bne.n	8000b8e <getChar+0x16>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e017      	b.n	8000bbe <getChar+0x46>
	result=rxBuffer[rxBufferGp++];
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <getChar+0x54>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	490d      	ldr	r1, [pc, #52]	; (8000bcc <getChar+0x54>)
 8000b96:	600a      	str	r2, [r1, #0]
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <getChar+0x5c>)
 8000b9a:	5cd3      	ldrb	r3, [r2, r3]
 8000b9c:	71fb      	strb	r3, [r7, #7]
	rxBufferGp%=rxBufferMax;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <getChar+0x54>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <getChar+0x60>)
 8000ba4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba8:	4413      	add	r3, r2
 8000baa:	11d9      	asrs	r1, r3, #7
 8000bac:	17d3      	asrs	r3, r2, #31
 8000bae:	1ac9      	subs	r1, r1, r3
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	021b      	lsls	r3, r3, #8
 8000bb4:	1a5b      	subs	r3, r3, r1
 8000bb6:	1ad1      	subs	r1, r2, r3
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <getChar+0x54>)
 8000bba:	6019      	str	r1, [r3, #0]
	return result;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200000d4 	.word	0x200000d4
 8000bd0:	200000d8 	.word	0x200000d8
 8000bd4:	200000dc 	.word	0x200000dc
 8000bd8:	80808081 	.word	0x80808081

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf8:	4c0b      	ldr	r4, [pc, #44]	; (8000c28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c06:	f7ff ff67 	bl	8000ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f002 fdbb 	bl	8003784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fc83 	bl	8000518 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000c20:	0800381c 	.word	0x0800381c
  ldr r2, =_sbss
 8000c24:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000c28:	200001e0 	.word	0x200001e0

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f94f 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fe34 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f967 	bl	8000f66 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f92f 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000020 	.word	0x20000020
 8000ccc:	20000028 	.word	0x20000028
 8000cd0:	20000024 	.word	0x20000024

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000028 	.word	0x20000028
 8000cf8:	200001dc 	.word	0x200001dc

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	200001dc 	.word	0x200001dc

08000d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000028 	.word	0x20000028

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff29 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff3e 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff31 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff feb6 	bl	8000cfc <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d008      	beq.n	8000fb0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e052      	b.n	8001056 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0216 	bic.w	r2, r2, #22
 8000fbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d103      	bne.n	8000fe0 <HAL_DMA_Abort+0x62>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d007      	beq.n	8000ff0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 0208 	bic.w	r2, r2, #8
 8000fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001000:	e013      	b.n	800102a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001002:	f7ff fe7b 	bl	8000cfc <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b05      	cmp	r3, #5
 800100e:	d90c      	bls.n	800102a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2220      	movs	r2, #32
 8001014:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e015      	b.n	8001056 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1e4      	bne.n	8001002 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103c:	223f      	movs	r2, #63	; 0x3f
 800103e:	409a      	lsls	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d004      	beq.n	800107c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e00c      	b.n	8001096 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2205      	movs	r2, #5
 8001080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e159      	b.n	8001374 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8148 	bne.w	800136e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d005      	beq.n	80010f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d130      	bne.n	8001158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 0201 	and.w	r2, r3, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b03      	cmp	r3, #3
 8001162:	d017      	beq.n	8001194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a2 	beq.w	800136e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b57      	ldr	r3, [pc, #348]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b54      	ldr	r3, [pc, #336]	; (800138c <HAL_GPIO_Init+0x2e8>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <HAL_GPIO_Init+0x2f0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x202>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a48      	ldr	r2, [pc, #288]	; (8001398 <HAL_GPIO_Init+0x2f4>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x1fe>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a47      	ldr	r2, [pc, #284]	; (800139c <HAL_GPIO_Init+0x2f8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x1fa>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a46      	ldr	r2, [pc, #280]	; (80013a0 <HAL_GPIO_Init+0x2fc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x1f6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_GPIO_Init+0x300>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x1f2>
 8001292:	2304      	movs	r3, #4
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 8001296:	2307      	movs	r3, #7
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_GPIO_Init+0x304>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001314:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133e:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001368:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f aea2 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e267      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d075      	beq.n	80014b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ca:	4b88      	ldr	r3, [pc, #544]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d00c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d6:	4b85      	ldr	r3, [pc, #532]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d112      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e2:	4b82      	ldr	r3, [pc, #520]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ee:	d10b      	bne.n	8001408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	4b7e      	ldr	r3, [pc, #504]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d05b      	beq.n	80014b4 <HAL_RCC_OscConfig+0x108>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d157      	bne.n	80014b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e242      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d106      	bne.n	8001420 <HAL_RCC_OscConfig+0x74>
 8001412:	4b76      	ldr	r3, [pc, #472]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a75      	ldr	r2, [pc, #468]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e01d      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x98>
 800142a:	4b70      	ldr	r3, [pc, #448]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a6f      	ldr	r2, [pc, #444]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b6d      	ldr	r3, [pc, #436]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6c      	ldr	r2, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xb0>
 8001444:	4b69      	ldr	r3, [pc, #420]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a68      	ldr	r2, [pc, #416]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 800144a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b66      	ldr	r3, [pc, #408]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a65      	ldr	r2, [pc, #404]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fc4a 	bl	8000cfc <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fc46 	bl	8000cfc <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e207      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0xc0>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fc36 	bl	8000cfc <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fc32 	bl	8000cfc <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1f3      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0xe8>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014c2:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d11c      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014da:	4b44      	ldr	r3, [pc, #272]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	4b41      	ldr	r3, [pc, #260]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1c7      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4937      	ldr	r1, [pc, #220]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	e03a      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <HAL_RCC_OscConfig+0x244>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001522:	f7ff fbeb 	bl	8000cfc <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fbe7 	bl	8000cfc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1a8      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4925      	ldr	r1, [pc, #148]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_OscConfig+0x244>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fbca 	bl	8000cfc <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fbc6 	bl	8000cfc <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e187      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d036      	beq.n	8001604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d016      	beq.n	80015cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <HAL_RCC_OscConfig+0x248>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a4:	f7ff fbaa 	bl	8000cfc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fba6 	bl	8000cfc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e167      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_RCC_OscConfig+0x240>)
 80015c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x200>
 80015ca:	e01b      	b.n	8001604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_OscConfig+0x248>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fb93 	bl	8000cfc <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	e00e      	b.n	80015f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fb8f 	bl	8000cfc <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d907      	bls.n	80015f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e150      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
 80015ec:	40023800 	.word	0x40023800
 80015f0:	42470000 	.word	0x42470000
 80015f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	4b88      	ldr	r3, [pc, #544]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80015fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ea      	bne.n	80015da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8097 	beq.w	8001740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001616:	4b81      	ldr	r3, [pc, #516]	; (800181c <HAL_RCC_OscConfig+0x470>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10f      	bne.n	8001642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b7d      	ldr	r3, [pc, #500]	; (800181c <HAL_RCC_OscConfig+0x470>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a7c      	ldr	r2, [pc, #496]	; (800181c <HAL_RCC_OscConfig+0x470>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b7a      	ldr	r3, [pc, #488]	; (800181c <HAL_RCC_OscConfig+0x470>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163e:	2301      	movs	r3, #1
 8001640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001642:	4b77      	ldr	r3, [pc, #476]	; (8001820 <HAL_RCC_OscConfig+0x474>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d118      	bne.n	8001680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164e:	4b74      	ldr	r3, [pc, #464]	; (8001820 <HAL_RCC_OscConfig+0x474>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a73      	ldr	r2, [pc, #460]	; (8001820 <HAL_RCC_OscConfig+0x474>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7ff fb4f 	bl	8000cfc <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff fb4b 	bl	8000cfc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e10c      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	4b6a      	ldr	r3, [pc, #424]	; (8001820 <HAL_RCC_OscConfig+0x474>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x2ea>
 8001688:	4b64      	ldr	r3, [pc, #400]	; (800181c <HAL_RCC_OscConfig+0x470>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168c:	4a63      	ldr	r2, [pc, #396]	; (800181c <HAL_RCC_OscConfig+0x470>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6713      	str	r3, [r2, #112]	; 0x70
 8001694:	e01c      	b.n	80016d0 <HAL_RCC_OscConfig+0x324>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x30c>
 800169e:	4b5f      	ldr	r3, [pc, #380]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a5e      	ldr	r2, [pc, #376]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
 80016aa:	4b5c      	ldr	r3, [pc, #368]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	4a5b      	ldr	r2, [pc, #364]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6713      	str	r3, [r2, #112]	; 0x70
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0x324>
 80016b8:	4b58      	ldr	r3, [pc, #352]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	4a57      	ldr	r2, [pc, #348]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6713      	str	r3, [r2, #112]	; 0x70
 80016c4:	4b55      	ldr	r3, [pc, #340]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a54      	ldr	r2, [pc, #336]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 0304 	bic.w	r3, r3, #4
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d015      	beq.n	8001704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff fb10 	bl	8000cfc <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb0c 	bl	8000cfc <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e0cb      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	4b49      	ldr	r3, [pc, #292]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0ee      	beq.n	80016e0 <HAL_RCC_OscConfig+0x334>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff fafa 	bl	8000cfc <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170c:	f7ff faf6 	bl	8000cfc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e0b5      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001722:	4b3e      	ldr	r3, [pc, #248]	; (800181c <HAL_RCC_OscConfig+0x470>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1ee      	bne.n	800170c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001734:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_RCC_OscConfig+0x470>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a38      	ldr	r2, [pc, #224]	; (800181c <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80a1 	beq.w	800188c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_RCC_OscConfig+0x470>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b08      	cmp	r3, #8
 8001754:	d05c      	beq.n	8001810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d141      	bne.n	80017e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_RCC_OscConfig+0x478>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff faca 	bl	8000cfc <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fac6 	bl	8000cfc <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e087      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_RCC_OscConfig+0x470>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	019b      	lsls	r3, r3, #6
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	3b01      	subs	r3, #1
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	491b      	ldr	r1, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_RCC_OscConfig+0x478>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fa9f 	bl	8000cfc <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff fa9b 	bl	8000cfc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e05c      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_RCC_OscConfig+0x470>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x416>
 80017e0:	e054      	b.n	800188c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_RCC_OscConfig+0x478>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fa88 	bl	8000cfc <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fa84 	bl	8000cfc <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e045      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_RCC_OscConfig+0x470>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x444>
 800180e:	e03d      	b.n	800188c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d107      	bne.n	8001828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e038      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
 800181c:	40023800 	.word	0x40023800
 8001820:	40007000 	.word	0x40007000
 8001824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0x4ec>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d028      	beq.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d121      	bne.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d11a      	bne.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800185e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001860:	4293      	cmp	r3, r2
 8001862:	d111      	bne.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	3b01      	subs	r3, #1
 8001872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d107      	bne.n	8001888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0cc      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b0:	4b68      	ldr	r3, [pc, #416]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d90c      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b8      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f0:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4a58      	ldr	r2, [pc, #352]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a52      	ldr	r2, [pc, #328]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	494d      	ldr	r1, [pc, #308]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d044      	beq.n	80019bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d119      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e07f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d003      	beq.n	800195a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001956:	2b03      	cmp	r3, #3
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	4b3b      	ldr	r3, [pc, #236]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e067      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f023 0203 	bic.w	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4934      	ldr	r1, [pc, #208]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800198c:	f7ff f9b6 	bl	8000cfc <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	e00a      	b.n	80019aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff f9b2 	bl	8000cfc <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e04f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 020c 	and.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1eb      	bne.n	8001994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d20c      	bcs.n	80019e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e032      	b.n	8001a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4916      	ldr	r1, [pc, #88]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d009      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a22:	f000 f821 	bl	8001a68 <HAL_RCC_GetSysClockFreq>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	490a      	ldr	r1, [pc, #40]	; (8001a5c <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	5ccb      	ldrb	r3, [r1, r3]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f916 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023c00 	.word	0x40023c00
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	080037f4 	.word	0x080037f4
 8001a60:	20000020 	.word	0x20000020
 8001a64:	20000024 	.word	0x20000024

08001a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a6c:	b090      	sub	sp, #64	; 0x40
 8001a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
 8001a74:	2300      	movs	r3, #0
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a78:	2300      	movs	r3, #0
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a80:	4b59      	ldr	r3, [pc, #356]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d00d      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	f200 80a1 	bhi.w	8001bd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_RCC_GetSysClockFreq+0x34>
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d003      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a9a:	e09b      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_GetSysClockFreq+0x184>)
 8001a9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001aa0:	e09b      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa2:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aa6:	e098      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa8:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab2:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d028      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001abe:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	099b      	lsrs	r3, r3, #6
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ad4:	fb03 f201 	mul.w	r2, r3, r1
 8001ad8:	2300      	movs	r3, #0
 8001ada:	fb00 f303 	mul.w	r3, r0, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a43      	ldr	r2, [pc, #268]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ae2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ae8:	460a      	mov	r2, r1
 8001aea:	62ba      	str	r2, [r7, #40]	; 0x28
 8001aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aee:	4413      	add	r3, r2
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af4:	2200      	movs	r2, #0
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	61fa      	str	r2, [r7, #28]
 8001afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001afe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b02:	f7fe fb69 	bl	80001d8 <__aeabi_uldivmod>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b0e:	e053      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	2200      	movs	r2, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	617a      	str	r2, [r7, #20]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b22:	f04f 0b00 	mov.w	fp, #0
 8001b26:	4652      	mov	r2, sl
 8001b28:	465b      	mov	r3, fp
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	0159      	lsls	r1, r3, #5
 8001b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b38:	0150      	lsls	r0, r2, #5
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b42:	eb63 090b 	sbc.w	r9, r3, fp
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b5a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b5e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	00eb      	lsls	r3, r5, #3
 8001b6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b70:	00e2      	lsls	r2, r4, #3
 8001b72:	4614      	mov	r4, r2
 8001b74:	461d      	mov	r5, r3
 8001b76:	eb14 030a 	adds.w	r3, r4, sl
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	eb45 030b 	adc.w	r3, r5, fp
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b8e:	4629      	mov	r1, r5
 8001b90:	028b      	lsls	r3, r1, #10
 8001b92:	4621      	mov	r1, r4
 8001b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b98:	4621      	mov	r1, r4
 8001b9a:	028a      	lsls	r2, r1, #10
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	60fa      	str	r2, [r7, #12]
 8001ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bac:	f7fe fb14 	bl	80001d8 <__aeabi_uldivmod>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bd2:	e002      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetSysClockFreq+0x184>)
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3740      	adds	r7, #64	; 0x40
 8001be0:	46bd      	mov	sp, r7
 8001be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	00f42400 	.word	0x00f42400
 8001bf0:	017d7840 	.word	0x017d7840

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000020 	.word	0x20000020

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	0a9b      	lsrs	r3, r3, #10
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	08003804 	.word	0x08003804

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffdc 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0b5b      	lsrs	r3, r3, #13
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08003804 	.word	0x08003804

08001c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e041      	b.n	8001cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe fe4c 	bl	8000920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 fac0 	bl	8002220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e041      	b.n	8001d90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d106      	bne.n	8001d26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f839 	bl	8001d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f000 fa71 	bl	8002220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <HAL_TIM_PWM_Start+0x24>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	bf14      	ite	ne
 8001dc8:	2301      	movne	r3, #1
 8001dca:	2300      	moveq	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e022      	b.n	8001e16 <HAL_TIM_PWM_Start+0x6a>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d109      	bne.n	8001dea <HAL_TIM_PWM_Start+0x3e>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	bf14      	ite	ne
 8001de2:	2301      	movne	r3, #1
 8001de4:	2300      	moveq	r3, #0
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e015      	b.n	8001e16 <HAL_TIM_PWM_Start+0x6a>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d109      	bne.n	8001e04 <HAL_TIM_PWM_Start+0x58>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	bf14      	ite	ne
 8001dfc:	2301      	movne	r3, #1
 8001dfe:	2300      	moveq	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e008      	b.n	8001e16 <HAL_TIM_PWM_Start+0x6a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e068      	b.n	8001ef0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_PWM_Start+0x82>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e2c:	e013      	b.n	8001e56 <HAL_TIM_PWM_Start+0xaa>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_PWM_Start+0x92>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e3c:	e00b      	b.n	8001e56 <HAL_TIM_PWM_Start+0xaa>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d104      	bne.n	8001e4e <HAL_TIM_PWM_Start+0xa2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e4c:	e003      	b.n	8001e56 <HAL_TIM_PWM_Start+0xaa>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fc84 	bl	800276c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <HAL_TIM_PWM_Start+0x14c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d107      	bne.n	8001e7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <HAL_TIM_PWM_Start+0x14c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d018      	beq.n	8001eba <HAL_TIM_PWM_Start+0x10e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e90:	d013      	beq.n	8001eba <HAL_TIM_PWM_Start+0x10e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a19      	ldr	r2, [pc, #100]	; (8001efc <HAL_TIM_PWM_Start+0x150>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00e      	beq.n	8001eba <HAL_TIM_PWM_Start+0x10e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a17      	ldr	r2, [pc, #92]	; (8001f00 <HAL_TIM_PWM_Start+0x154>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_TIM_PWM_Start+0x10e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <HAL_TIM_PWM_Start+0x158>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_TIM_PWM_Start+0x10e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <HAL_TIM_PWM_Start+0x15c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d111      	bne.n	8001ede <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b06      	cmp	r3, #6
 8001eca:	d010      	beq.n	8001eee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001edc:	e007      	b.n	8001eee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40000800 	.word	0x40000800
 8001f04:	40000c00 	.word	0x40000c00
 8001f08:	40014000 	.word	0x40014000

08001f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e0ae      	b.n	8002088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0c      	cmp	r3, #12
 8001f36:	f200 809f 	bhi.w	8002078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001f3a:	a201      	add	r2, pc, #4	; (adr r2, 8001f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f40:	08001f75 	.word	0x08001f75
 8001f44:	08002079 	.word	0x08002079
 8001f48:	08002079 	.word	0x08002079
 8001f4c:	08002079 	.word	0x08002079
 8001f50:	08001fb5 	.word	0x08001fb5
 8001f54:	08002079 	.word	0x08002079
 8001f58:	08002079 	.word	0x08002079
 8001f5c:	08002079 	.word	0x08002079
 8001f60:	08001ff7 	.word	0x08001ff7
 8001f64:	08002079 	.word	0x08002079
 8001f68:	08002079 	.word	0x08002079
 8001f6c:	08002079 	.word	0x08002079
 8001f70:	08002037 	.word	0x08002037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f9d0 	bl	8002320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0208 	orr.w	r2, r2, #8
 8001f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0204 	bic.w	r2, r2, #4
 8001f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6999      	ldr	r1, [r3, #24]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	619a      	str	r2, [r3, #24]
      break;
 8001fb2:	e064      	b.n	800207e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fa16 	bl	80023ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6999      	ldr	r1, [r3, #24]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	021a      	lsls	r2, r3, #8
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	619a      	str	r2, [r3, #24]
      break;
 8001ff4:	e043      	b.n	800207e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fa61 	bl	80024c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0208 	orr.w	r2, r2, #8
 8002010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69da      	ldr	r2, [r3, #28]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0204 	bic.w	r2, r2, #4
 8002020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69d9      	ldr	r1, [r3, #28]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	61da      	str	r2, [r3, #28]
      break;
 8002034:	e023      	b.n	800207e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	4618      	mov	r0, r3
 800203e:	f000 faab 	bl	8002598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	69d9      	ldr	r1, [r3, #28]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	021a      	lsls	r2, r3, #8
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	61da      	str	r2, [r3, #28]
      break;
 8002076:	e002      	b.n	800207e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	75fb      	strb	r3, [r7, #23]
      break;
 800207c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002086:	7dfb      	ldrb	r3, [r7, #23]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_TIM_ConfigClockSource+0x1c>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e0b4      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x186>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e4:	d03e      	beq.n	8002164 <HAL_TIM_ConfigClockSource+0xd4>
 80020e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ea:	f200 8087 	bhi.w	80021fc <HAL_TIM_ConfigClockSource+0x16c>
 80020ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f2:	f000 8086 	beq.w	8002202 <HAL_TIM_ConfigClockSource+0x172>
 80020f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fa:	d87f      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x16c>
 80020fc:	2b70      	cmp	r3, #112	; 0x70
 80020fe:	d01a      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0xa6>
 8002100:	2b70      	cmp	r3, #112	; 0x70
 8002102:	d87b      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x16c>
 8002104:	2b60      	cmp	r3, #96	; 0x60
 8002106:	d050      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0x11a>
 8002108:	2b60      	cmp	r3, #96	; 0x60
 800210a:	d877      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x16c>
 800210c:	2b50      	cmp	r3, #80	; 0x50
 800210e:	d03c      	beq.n	800218a <HAL_TIM_ConfigClockSource+0xfa>
 8002110:	2b50      	cmp	r3, #80	; 0x50
 8002112:	d873      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x16c>
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d058      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0x13a>
 8002118:	2b40      	cmp	r3, #64	; 0x40
 800211a:	d86f      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x16c>
 800211c:	2b30      	cmp	r3, #48	; 0x30
 800211e:	d064      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x15a>
 8002120:	2b30      	cmp	r3, #48	; 0x30
 8002122:	d86b      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x16c>
 8002124:	2b20      	cmp	r3, #32
 8002126:	d060      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x15a>
 8002128:	2b20      	cmp	r3, #32
 800212a:	d867      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x16c>
 800212c:	2b00      	cmp	r3, #0
 800212e:	d05c      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x15a>
 8002130:	2b10      	cmp	r3, #16
 8002132:	d05a      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x15a>
 8002134:	e062      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f000 faf1 	bl	800272c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	609a      	str	r2, [r3, #8]
      break;
 8002162:	e04f      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f000 fada 	bl	800272c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002186:	609a      	str	r2, [r3, #8]
      break;
 8002188:	e03c      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	461a      	mov	r2, r3
 8002198:	f000 fa4e 	bl	8002638 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2150      	movs	r1, #80	; 0x50
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 faa7 	bl	80026f6 <TIM_ITRx_SetConfig>
      break;
 80021a8:	e02c      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6859      	ldr	r1, [r3, #4]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f000 fa6d 	bl	8002696 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2160      	movs	r1, #96	; 0x60
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fa97 	bl	80026f6 <TIM_ITRx_SetConfig>
      break;
 80021c8:	e01c      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6859      	ldr	r1, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f000 fa2e 	bl	8002638 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2140      	movs	r1, #64	; 0x40
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 fa87 	bl	80026f6 <TIM_ITRx_SetConfig>
      break;
 80021e8:	e00c      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	4610      	mov	r0, r2
 80021f6:	f000 fa7e 	bl	80026f6 <TIM_ITRx_SetConfig>
      break;
 80021fa:	e003      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002200:	e000      	b.n	8002204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a34      	ldr	r2, [pc, #208]	; (8002304 <TIM_Base_SetConfig+0xe4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00f      	beq.n	8002258 <TIM_Base_SetConfig+0x38>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d00b      	beq.n	8002258 <TIM_Base_SetConfig+0x38>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a31      	ldr	r2, [pc, #196]	; (8002308 <TIM_Base_SetConfig+0xe8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <TIM_Base_SetConfig+0x38>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a30      	ldr	r2, [pc, #192]	; (800230c <TIM_Base_SetConfig+0xec>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d003      	beq.n	8002258 <TIM_Base_SetConfig+0x38>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <TIM_Base_SetConfig+0xf0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d108      	bne.n	800226a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <TIM_Base_SetConfig+0xe4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01b      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002278:	d017      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a22      	ldr	r2, [pc, #136]	; (8002308 <TIM_Base_SetConfig+0xe8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a21      	ldr	r2, [pc, #132]	; (800230c <TIM_Base_SetConfig+0xec>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00f      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a20      	ldr	r2, [pc, #128]	; (8002310 <TIM_Base_SetConfig+0xf0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00b      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <TIM_Base_SetConfig+0xf4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <TIM_Base_SetConfig+0xf8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <TIM_Base_SetConfig+0x8a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <TIM_Base_SetConfig+0xfc>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d108      	bne.n	80022bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <TIM_Base_SetConfig+0xe4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d103      	bne.n	80022f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	615a      	str	r2, [r3, #20]
}
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800
 8002310:	40000c00 	.word	0x40000c00
 8002314:	40014000 	.word	0x40014000
 8002318:	40014400 	.word	0x40014400
 800231c:	40014800 	.word	0x40014800

08002320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	f023 0201 	bic.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f023 0302 	bic.w	r3, r3, #2
 8002368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <TIM_OC1_SetConfig+0xc8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d10c      	bne.n	8002396 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f023 0308 	bic.w	r3, r3, #8
 8002382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <TIM_OC1_SetConfig+0xc8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d111      	bne.n	80023c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	621a      	str	r2, [r3, #32]
}
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40010000 	.word	0x40010000

080023ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f023 0210 	bic.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800241a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f023 0320 	bic.w	r3, r3, #32
 8002436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a1e      	ldr	r2, [pc, #120]	; (80024c0 <TIM_OC2_SetConfig+0xd4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10d      	bne.n	8002468 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002466:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <TIM_OC2_SetConfig+0xd4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d113      	bne.n	8002498 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800247e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	621a      	str	r2, [r3, #32]
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40010000 	.word	0x40010000

080024c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0303 	bic.w	r3, r3, #3
 80024fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800250c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <TIM_OC3_SetConfig+0xd0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d10d      	bne.n	800253e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	021b      	lsls	r3, r3, #8
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800253c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <TIM_OC3_SetConfig+0xd0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d113      	bne.n	800256e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800254c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	621a      	str	r2, [r3, #32]
}
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40010000 	.word	0x40010000

08002598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	031b      	lsls	r3, r3, #12
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a10      	ldr	r2, [pc, #64]	; (8002634 <TIM_OC4_SetConfig+0x9c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d109      	bne.n	800260c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	621a      	str	r2, [r3, #32]
}
 8002626:	bf00      	nop
 8002628:	371c      	adds	r7, #28
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000

08002638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f023 0201 	bic.w	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f023 030a 	bic.w	r3, r3, #10
 8002674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	621a      	str	r2, [r3, #32]
}
 800268a:	bf00      	nop
 800268c:	371c      	adds	r7, #28
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002696:	b480      	push	{r7}
 8002698:	b087      	sub	sp, #28
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f023 0210 	bic.w	r2, r3, #16
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	031b      	lsls	r3, r3, #12
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	621a      	str	r2, [r3, #32]
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	f043 0307 	orr.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	609a      	str	r2, [r3, #8]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	021a      	lsls	r2, r3, #8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	431a      	orrs	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	609a      	str	r2, [r3, #8]
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	2201      	movs	r2, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1a      	ldr	r2, [r3, #32]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	43db      	mvns	r3, r3
 800278e:	401a      	ands	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1a      	ldr	r2, [r3, #32]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	fa01 f303 	lsl.w	r3, r1, r3
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	621a      	str	r2, [r3, #32]
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e050      	b.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d018      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d013      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00e      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a13      	ldr	r2, [pc, #76]	; (8002890 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10c      	bne.n	8002860 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800284c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	4313      	orrs	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40010000 	.word	0x40010000
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800
 800288c:	40000c00 	.word	0x40000c00
 8002890:	40014000 	.word	0x40014000

08002894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e03f      	b.n	8002926 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe f888 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fcdf 	bl	800329c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800290c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	4613      	mov	r3, r2
 800293a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b20      	cmp	r3, #32
 8002946:	d11d      	bne.n	8002984 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_UART_Receive_IT+0x26>
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e016      	b.n	8002986 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_UART_Receive_IT+0x38>
 8002962:	2302      	movs	r3, #2
 8002964:	e00f      	b.n	8002986 <HAL_UART_Receive_IT+0x58>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	461a      	mov	r2, r3
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fab6 	bl	8002eec <UART_Start_Receive_IT>
 8002980:	4603      	mov	r3, r0
 8002982:	e000      	b.n	8002986 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0ba      	sub	sp, #232	; 0xe8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_UART_IRQHandler+0x66>
 80029e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fb99 	bl	8003126 <UART_Receive_IT>
      return;
 80029f4:	e256      	b.n	8002ea4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80de 	beq.w	8002bbc <HAL_UART_IRQHandler+0x22c>
 8002a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d106      	bne.n	8002a1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80d1 	beq.w	8002bbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_UART_IRQHandler+0xae>
 8002a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_UART_IRQHandler+0xd2>
 8002a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f043 0202 	orr.w	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_UART_IRQHandler+0xf6>
 8002a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0204 	orr.w	r2, r3, #4
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d011      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x126>
 8002a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d105      	bne.n	8002aaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f043 0208 	orr.w	r2, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 81ed 	beq.w	8002e9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac4:	f003 0320 	and.w	r3, r3, #32
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_UART_IRQHandler+0x14e>
 8002acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fb24 	bl	8003126 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <HAL_UART_IRQHandler+0x17a>
 8002b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d04f      	beq.n	8002baa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa2c 	bl	8002f68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d141      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3314      	adds	r3, #20
 8002b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1d9      	bne.n	8002b1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d013      	beq.n	8002b9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b76:	4a7d      	ldr	r2, [pc, #500]	; (8002d6c <HAL_UART_IRQHandler+0x3dc>)
 8002b78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fa6d 	bl	800105e <HAL_DMA_Abort_IT>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b94:	4610      	mov	r0, r2
 8002b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b98:	e00e      	b.n	8002bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f990 	bl	8002ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba0:	e00a      	b.n	8002bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f98c 	bl	8002ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba8:	e006      	b.n	8002bb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f988 	bl	8002ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bb6:	e170      	b.n	8002e9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	bf00      	nop
    return;
 8002bba:	e16e      	b.n	8002e9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	f040 814a 	bne.w	8002e5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8143 	beq.w	8002e5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 813c 	beq.w	8002e5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	f040 80b4 	bne.w	8002d70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8140 	beq.w	8002e9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c26:	429a      	cmp	r2, r3
 8002c28:	f080 8139 	bcs.w	8002e9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3e:	f000 8088 	beq.w	8002d52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1d9      	bne.n	8002c42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3314      	adds	r3, #20
 8002c94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c98:	e853 3f00 	ldrex	r3, [r3]
 8002c9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3314      	adds	r3, #20
 8002cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e1      	bne.n	8002c8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3314      	adds	r3, #20
 8002cd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e3      	bne.n	8002cca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	330c      	adds	r3, #12
 8002d16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d22:	f023 0310 	bic.w	r3, r3, #16
 8002d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d34:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d3c:	e841 2300 	strex	r3, r2, [r1]
 8002d40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e3      	bne.n	8002d10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe f916 	bl	8000f7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f8b6 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d68:	e099      	b.n	8002e9e <HAL_UART_IRQHandler+0x50e>
 8002d6a:	bf00      	nop
 8002d6c:	0800302f 	.word	0x0800302f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 808b 	beq.w	8002ea2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8086 	beq.w	8002ea2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	330c      	adds	r3, #12
 8002db6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dba:	647a      	str	r2, [r7, #68]	; 0x44
 8002dbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e3      	bne.n	8002d96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3314      	adds	r3, #20
 8002dee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002df2:	633a      	str	r2, [r7, #48]	; 0x30
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e3      	bne.n	8002dce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	e853 3f00 	ldrex	r3, [r3]
 8002e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0310 	bic.w	r3, r3, #16
 8002e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e38:	61fa      	str	r2, [r7, #28]
 8002e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	69b9      	ldr	r1, [r7, #24]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	617b      	str	r3, [r7, #20]
   return(result);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e3      	bne.n	8002e14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e50:	4619      	mov	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f83e 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e58:	e023      	b.n	8002ea2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_UART_IRQHandler+0x4ea>
 8002e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f8ef 	bl	8003056 <UART_Transmit_IT>
    return;
 8002e78:	e014      	b.n	8002ea4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00e      	beq.n	8002ea4 <HAL_UART_IRQHandler+0x514>
 8002e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f92f 	bl	80030f6 <UART_EndTransmit_IT>
    return;
 8002e98:	e004      	b.n	8002ea4 <HAL_UART_IRQHandler+0x514>
    return;
 8002e9a:	bf00      	nop
 8002e9c:	e002      	b.n	8002ea4 <HAL_UART_IRQHandler+0x514>
      return;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <HAL_UART_IRQHandler+0x514>
      return;
 8002ea2:	bf00      	nop
  }
}
 8002ea4:	37e8      	adds	r7, #232	; 0xe8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop

08002eac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	88fa      	ldrh	r2, [r7, #6]
 8002f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2222      	movs	r2, #34	; 0x22
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f38:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0201 	orr.w	r2, r2, #1
 8002f48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0220 	orr.w	r2, r2, #32
 8002f58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b095      	sub	sp, #84	; 0x54
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	330c      	adds	r3, #12
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f90:	643a      	str	r2, [r7, #64]	; 0x40
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e5      	bne.n	8002f70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3314      	adds	r3, #20
 8002faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3314      	adds	r3, #20
 8002fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fcc:	e841 2300 	strex	r3, r2, [r1]
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e5      	bne.n	8002fa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d119      	bne.n	8003014 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f023 0310 	bic.w	r3, r3, #16
 8002ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003000:	61ba      	str	r2, [r7, #24]
 8003002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	613b      	str	r3, [r7, #16]
   return(result);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e5      	bne.n	8002fe0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003022:	bf00      	nop
 8003024:	3754      	adds	r7, #84	; 0x54
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f7ff ff39 	bl	8002ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b21      	cmp	r3, #33	; 0x21
 8003068:	d13e      	bne.n	80030e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003072:	d114      	bne.n	800309e <UART_Transmit_IT+0x48>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d110      	bne.n	800309e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003090:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	1c9a      	adds	r2, r3, #2
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	621a      	str	r2, [r3, #32]
 800309c:	e008      	b.n	80030b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	1c59      	adds	r1, r3, #1
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6211      	str	r1, [r2, #32]
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4619      	mov	r1, r3
 80030be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10f      	bne.n	80030e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800310c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fec8 	bl	8002eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b08c      	sub	sp, #48	; 0x30
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b22      	cmp	r3, #34	; 0x22
 8003138:	f040 80ab 	bne.w	8003292 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	d117      	bne.n	8003176 <UART_Receive_IT+0x50>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d113      	bne.n	8003176 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003164:	b29a      	uxth	r2, r3
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	1c9a      	adds	r2, r3, #2
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
 8003174:	e026      	b.n	80031c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800317c:	2300      	movs	r3, #0
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003188:	d007      	beq.n	800319a <UART_Receive_IT+0x74>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <UART_Receive_IT+0x82>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e008      	b.n	80031ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4619      	mov	r1, r3
 80031d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d15a      	bne.n	800328e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0220 	bic.w	r2, r2, #32
 80031e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	2b01      	cmp	r3, #1
 8003216:	d135      	bne.n	8003284 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	613b      	str	r3, [r7, #16]
   return(result);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f023 0310 	bic.w	r3, r3, #16
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	330c      	adds	r3, #12
 800323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323e:	623a      	str	r2, [r7, #32]
 8003240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	69f9      	ldr	r1, [r7, #28]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	61bb      	str	r3, [r7, #24]
   return(result);
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e5      	bne.n	800321e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b10      	cmp	r3, #16
 800325e:	d10a      	bne.n	8003276 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fe29 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
 8003282:	e002      	b.n	800328a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fd fc47 	bl	8000b18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e002      	b.n	8003294 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3730      	adds	r7, #48	; 0x30
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b0c0      	sub	sp, #256	; 0x100
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	68d9      	ldr	r1, [r3, #12]
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	ea40 0301 	orr.w	r3, r0, r1
 80032c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	431a      	orrs	r2, r3
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032f4:	f021 010c 	bic.w	r1, r1, #12
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003302:	430b      	orrs	r3, r1
 8003304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	6999      	ldr	r1, [r3, #24]
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	ea40 0301 	orr.w	r3, r0, r1
 8003322:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <UART_SetConfig+0x2cc>)
 800332c:	429a      	cmp	r2, r3
 800332e:	d005      	beq.n	800333c <UART_SetConfig+0xa0>
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b8d      	ldr	r3, [pc, #564]	; (800356c <UART_SetConfig+0x2d0>)
 8003338:	429a      	cmp	r2, r3
 800333a:	d104      	bne.n	8003346 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800333c:	f7fe fc7a 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 8003340:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003344:	e003      	b.n	800334e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003346:	f7fe fc61 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 800334a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003358:	f040 810c 	bne.w	8003574 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800335c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003360:	2200      	movs	r2, #0
 8003362:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003366:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800336a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800336e:	4622      	mov	r2, r4
 8003370:	462b      	mov	r3, r5
 8003372:	1891      	adds	r1, r2, r2
 8003374:	65b9      	str	r1, [r7, #88]	; 0x58
 8003376:	415b      	adcs	r3, r3
 8003378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800337e:	4621      	mov	r1, r4
 8003380:	eb12 0801 	adds.w	r8, r2, r1
 8003384:	4629      	mov	r1, r5
 8003386:	eb43 0901 	adc.w	r9, r3, r1
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800339e:	4690      	mov	r8, r2
 80033a0:	4699      	mov	r9, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	eb18 0303 	adds.w	r3, r8, r3
 80033a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033ac:	462b      	mov	r3, r5
 80033ae:	eb49 0303 	adc.w	r3, r9, r3
 80033b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033ca:	460b      	mov	r3, r1
 80033cc:	18db      	adds	r3, r3, r3
 80033ce:	653b      	str	r3, [r7, #80]	; 0x50
 80033d0:	4613      	mov	r3, r2
 80033d2:	eb42 0303 	adc.w	r3, r2, r3
 80033d6:	657b      	str	r3, [r7, #84]	; 0x54
 80033d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033e0:	f7fc fefa 	bl	80001d8 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4b61      	ldr	r3, [pc, #388]	; (8003570 <UART_SetConfig+0x2d4>)
 80033ea:	fba3 2302 	umull	r2, r3, r3, r2
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	011c      	lsls	r4, r3, #4
 80033f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003400:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003404:	4642      	mov	r2, r8
 8003406:	464b      	mov	r3, r9
 8003408:	1891      	adds	r1, r2, r2
 800340a:	64b9      	str	r1, [r7, #72]	; 0x48
 800340c:	415b      	adcs	r3, r3
 800340e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003410:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003414:	4641      	mov	r1, r8
 8003416:	eb12 0a01 	adds.w	sl, r2, r1
 800341a:	4649      	mov	r1, r9
 800341c:	eb43 0b01 	adc.w	fp, r3, r1
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800342c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003434:	4692      	mov	sl, r2
 8003436:	469b      	mov	fp, r3
 8003438:	4643      	mov	r3, r8
 800343a:	eb1a 0303 	adds.w	r3, sl, r3
 800343e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003442:	464b      	mov	r3, r9
 8003444:	eb4b 0303 	adc.w	r3, fp, r3
 8003448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003458:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800345c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003460:	460b      	mov	r3, r1
 8003462:	18db      	adds	r3, r3, r3
 8003464:	643b      	str	r3, [r7, #64]	; 0x40
 8003466:	4613      	mov	r3, r2
 8003468:	eb42 0303 	adc.w	r3, r2, r3
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
 800346e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003472:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003476:	f7fc feaf 	bl	80001d8 <__aeabi_uldivmod>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4611      	mov	r1, r2
 8003480:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <UART_SetConfig+0x2d4>)
 8003482:	fba3 2301 	umull	r2, r3, r3, r1
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2264      	movs	r2, #100	; 0x64
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	1acb      	subs	r3, r1, r3
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003496:	4b36      	ldr	r3, [pc, #216]	; (8003570 <UART_SetConfig+0x2d4>)
 8003498:	fba3 2302 	umull	r2, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034a4:	441c      	add	r4, r3
 80034a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034b8:	4642      	mov	r2, r8
 80034ba:	464b      	mov	r3, r9
 80034bc:	1891      	adds	r1, r2, r2
 80034be:	63b9      	str	r1, [r7, #56]	; 0x38
 80034c0:	415b      	adcs	r3, r3
 80034c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034c8:	4641      	mov	r1, r8
 80034ca:	1851      	adds	r1, r2, r1
 80034cc:	6339      	str	r1, [r7, #48]	; 0x30
 80034ce:	4649      	mov	r1, r9
 80034d0:	414b      	adcs	r3, r1
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034e0:	4659      	mov	r1, fp
 80034e2:	00cb      	lsls	r3, r1, #3
 80034e4:	4651      	mov	r1, sl
 80034e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ea:	4651      	mov	r1, sl
 80034ec:	00ca      	lsls	r2, r1, #3
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	4642      	mov	r2, r8
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034fc:	464b      	mov	r3, r9
 80034fe:	460a      	mov	r2, r1
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003514:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800351c:	460b      	mov	r3, r1
 800351e:	18db      	adds	r3, r3, r3
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	4613      	mov	r3, r2
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800352e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003532:	f7fc fe51 	bl	80001d8 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <UART_SetConfig+0x2d4>)
 800353c:	fba3 1302 	umull	r1, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	2164      	movs	r1, #100	; 0x64
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	3332      	adds	r3, #50	; 0x32
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <UART_SetConfig+0x2d4>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	f003 0207 	and.w	r2, r3, #7
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4422      	add	r2, r4
 8003562:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003564:	e105      	b.n	8003772 <UART_SetConfig+0x4d6>
 8003566:	bf00      	nop
 8003568:	40011000 	.word	0x40011000
 800356c:	40011400 	.word	0x40011400
 8003570:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003578:	2200      	movs	r2, #0
 800357a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800357e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003582:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003586:	4642      	mov	r2, r8
 8003588:	464b      	mov	r3, r9
 800358a:	1891      	adds	r1, r2, r2
 800358c:	6239      	str	r1, [r7, #32]
 800358e:	415b      	adcs	r3, r3
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
 8003592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003596:	4641      	mov	r1, r8
 8003598:	1854      	adds	r4, r2, r1
 800359a:	4649      	mov	r1, r9
 800359c:	eb43 0501 	adc.w	r5, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	00eb      	lsls	r3, r5, #3
 80035aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ae:	00e2      	lsls	r2, r4, #3
 80035b0:	4614      	mov	r4, r2
 80035b2:	461d      	mov	r5, r3
 80035b4:	4643      	mov	r3, r8
 80035b6:	18e3      	adds	r3, r4, r3
 80035b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035bc:	464b      	mov	r3, r9
 80035be:	eb45 0303 	adc.w	r3, r5, r3
 80035c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035e2:	4629      	mov	r1, r5
 80035e4:	008b      	lsls	r3, r1, #2
 80035e6:	4621      	mov	r1, r4
 80035e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ec:	4621      	mov	r1, r4
 80035ee:	008a      	lsls	r2, r1, #2
 80035f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035f4:	f7fc fdf0 	bl	80001d8 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4b60      	ldr	r3, [pc, #384]	; (8003780 <UART_SetConfig+0x4e4>)
 80035fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	011c      	lsls	r4, r3, #4
 8003606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360a:	2200      	movs	r2, #0
 800360c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003610:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003614:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	1891      	adds	r1, r2, r2
 800361e:	61b9      	str	r1, [r7, #24]
 8003620:	415b      	adcs	r3, r3
 8003622:	61fb      	str	r3, [r7, #28]
 8003624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003628:	4641      	mov	r1, r8
 800362a:	1851      	adds	r1, r2, r1
 800362c:	6139      	str	r1, [r7, #16]
 800362e:	4649      	mov	r1, r9
 8003630:	414b      	adcs	r3, r1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003640:	4659      	mov	r1, fp
 8003642:	00cb      	lsls	r3, r1, #3
 8003644:	4651      	mov	r1, sl
 8003646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800364a:	4651      	mov	r1, sl
 800364c:	00ca      	lsls	r2, r1, #3
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	4603      	mov	r3, r0
 8003654:	4642      	mov	r2, r8
 8003656:	189b      	adds	r3, r3, r2
 8003658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800365c:	464b      	mov	r3, r9
 800365e:	460a      	mov	r2, r1
 8003660:	eb42 0303 	adc.w	r3, r2, r3
 8003664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	67bb      	str	r3, [r7, #120]	; 0x78
 8003672:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003680:	4649      	mov	r1, r9
 8003682:	008b      	lsls	r3, r1, #2
 8003684:	4641      	mov	r1, r8
 8003686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800368a:	4641      	mov	r1, r8
 800368c:	008a      	lsls	r2, r1, #2
 800368e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003692:	f7fc fda1 	bl	80001d8 <__aeabi_uldivmod>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4b39      	ldr	r3, [pc, #228]	; (8003780 <UART_SetConfig+0x4e4>)
 800369c:	fba3 1302 	umull	r1, r3, r3, r2
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	2164      	movs	r1, #100	; 0x64
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	3332      	adds	r3, #50	; 0x32
 80036ae:	4a34      	ldr	r2, [pc, #208]	; (8003780 <UART_SetConfig+0x4e4>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ba:	441c      	add	r4, r3
 80036bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c0:	2200      	movs	r2, #0
 80036c2:	673b      	str	r3, [r7, #112]	; 0x70
 80036c4:	677a      	str	r2, [r7, #116]	; 0x74
 80036c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036ca:	4642      	mov	r2, r8
 80036cc:	464b      	mov	r3, r9
 80036ce:	1891      	adds	r1, r2, r2
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	415b      	adcs	r3, r3
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036da:	4641      	mov	r1, r8
 80036dc:	1851      	adds	r1, r2, r1
 80036de:	6039      	str	r1, [r7, #0]
 80036e0:	4649      	mov	r1, r9
 80036e2:	414b      	adcs	r3, r1
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036f2:	4659      	mov	r1, fp
 80036f4:	00cb      	lsls	r3, r1, #3
 80036f6:	4651      	mov	r1, sl
 80036f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036fc:	4651      	mov	r1, sl
 80036fe:	00ca      	lsls	r2, r1, #3
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	4603      	mov	r3, r0
 8003706:	4642      	mov	r2, r8
 8003708:	189b      	adds	r3, r3, r2
 800370a:	66bb      	str	r3, [r7, #104]	; 0x68
 800370c:	464b      	mov	r3, r9
 800370e:	460a      	mov	r2, r1
 8003710:	eb42 0303 	adc.w	r3, r2, r3
 8003714:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	663b      	str	r3, [r7, #96]	; 0x60
 8003720:	667a      	str	r2, [r7, #100]	; 0x64
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800372e:	4649      	mov	r1, r9
 8003730:	008b      	lsls	r3, r1, #2
 8003732:	4641      	mov	r1, r8
 8003734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003738:	4641      	mov	r1, r8
 800373a:	008a      	lsls	r2, r1, #2
 800373c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003740:	f7fc fd4a 	bl	80001d8 <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <UART_SetConfig+0x4e4>)
 800374a:	fba3 1302 	umull	r1, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2164      	movs	r1, #100	; 0x64
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	3332      	adds	r3, #50	; 0x32
 800375c:	4a08      	ldr	r2, [pc, #32]	; (8003780 <UART_SetConfig+0x4e4>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	f003 020f 	and.w	r2, r3, #15
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4422      	add	r2, r4
 8003770:	609a      	str	r2, [r3, #8]
}
 8003772:	bf00      	nop
 8003774:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003778:	46bd      	mov	sp, r7
 800377a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377e:	bf00      	nop
 8003780:	51eb851f 	.word	0x51eb851f

08003784 <__libc_init_array>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	4d0d      	ldr	r5, [pc, #52]	; (80037bc <__libc_init_array+0x38>)
 8003788:	4c0d      	ldr	r4, [pc, #52]	; (80037c0 <__libc_init_array+0x3c>)
 800378a:	1b64      	subs	r4, r4, r5
 800378c:	10a4      	asrs	r4, r4, #2
 800378e:	2600      	movs	r6, #0
 8003790:	42a6      	cmp	r6, r4
 8003792:	d109      	bne.n	80037a8 <__libc_init_array+0x24>
 8003794:	4d0b      	ldr	r5, [pc, #44]	; (80037c4 <__libc_init_array+0x40>)
 8003796:	4c0c      	ldr	r4, [pc, #48]	; (80037c8 <__libc_init_array+0x44>)
 8003798:	f000 f820 	bl	80037dc <_init>
 800379c:	1b64      	subs	r4, r4, r5
 800379e:	10a4      	asrs	r4, r4, #2
 80037a0:	2600      	movs	r6, #0
 80037a2:	42a6      	cmp	r6, r4
 80037a4:	d105      	bne.n	80037b2 <__libc_init_array+0x2e>
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ac:	4798      	blx	r3
 80037ae:	3601      	adds	r6, #1
 80037b0:	e7ee      	b.n	8003790 <__libc_init_array+0xc>
 80037b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b6:	4798      	blx	r3
 80037b8:	3601      	adds	r6, #1
 80037ba:	e7f2      	b.n	80037a2 <__libc_init_array+0x1e>
 80037bc:	08003814 	.word	0x08003814
 80037c0:	08003814 	.word	0x08003814
 80037c4:	08003814 	.word	0x08003814
 80037c8:	08003818 	.word	0x08003818

080037cc <memset>:
 80037cc:	4402      	add	r2, r0
 80037ce:	4603      	mov	r3, r0
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d100      	bne.n	80037d6 <memset+0xa>
 80037d4:	4770      	bx	lr
 80037d6:	f803 1b01 	strb.w	r1, [r3], #1
 80037da:	e7f9      	b.n	80037d0 <memset+0x4>

080037dc <_init>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr

080037e8 <_fini>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr
